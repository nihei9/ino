package template

type {{ .TagStructName }}{{ genTyVarDecls }} struct {
	{{ genFields }}
}

func {{ .TagName }}{{ genTyVarDecls }}({{ genParams }}) {{ .DataName }}{{ genTyVarNames }} {
	return &{{ .TagStructName }}{{ genTyVarNames }}{
		{{ genKeyValuePairs }}
	}
}

func (x *{{ .TagStructName }}{{ genTyVarNames }}) Maybe() *{{ .MatcherStructName }}{{ genTyVarNames }} {
	return &{{ .MatcherStructName }}{{ genTyVarNames }}{x: x}
}

func (x *{{ .MatcherStructName }}{{ genTyVarNames }}) {{ .TagName }}() *{{ .MaybeTagStructName }}{{ genTyVarNames }} {
	if y, ok := x.x.(*{{ .TagStructName }}{{ genTyVarNames }}); ok {
		return &{{ .MaybeTagStructName }}{{ genTyVarNames }}{x: y}
	}
	return &{{ .MaybeTagStructName }}{{ genTyVarNames }}{}
}

type {{ .MaybeTagStructName }}{{ genTyVarDecls }} struct {
	x *{{ .TagStructName }}{{ genTyVarNames }}
}

func (x *{{ .MaybeTagStructName }}{{ genTyVarNames }}) OK() bool {
	return x.x != nil
}

{{ if .HasFields }}
func (x *{{ .MaybeTagStructName }}{{ genTyVarNames }}) Fields() ({{ genFieldsMethodResults }}) {
	if !x.OK() {
		return
	}
	{{ genFieldsMethodReturn }}
}
{{ end }}

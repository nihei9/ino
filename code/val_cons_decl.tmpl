package template

type {{ .TagStructName }}{{ .TyVarsWithType }} struct {
	{{ .Fields }}
}

func {{ .TagName }}{{ .TyVarsWithType }}({{ .Params }}) {{ .DataName }}{{ .TyVars }} {
	return &{{ .TagStructName }}{{ .TyVars }}{
		{{ .KeyValuePairs }}
	}
}

func (x *{{ .TagStructName }}{{ .TyVars }}) Eq(y Eqer) bool {
{{ if .HasFields }}
	if z, ok := y.(*{{ .TagStructName }}{{ .TyVars }}); ok {
		return {{ .FieldsEqExpr }}
	}
	return false
{{ else }}
	_, ok := y.(*{{ .TagStructName }}{{ .TyVars }})
	return ok
{{ end }}
}

func (x *{{ .TagStructName }}{{ .TyVars }}) Maybe() *{{ .MatcherStructName }}{{ .TyVars }} {
	return &{{ .MatcherStructName }}{{ .TyVars }}{x: x}
}

func (x *{{ .TagStructName }}{{ .TyVars }}) tag() string {
	return "{{ .TagName }}"
}

func (x *{{ .TagStructName }}{{ .TyVars }}) tagNum() int {
	return {{ .TagNum }}
}

func (x *{{ .MatcherStructName }}{{ .TyVars }}) {{ .TagName }}() *{{ .MaybeTagStructName }}{{ .TyVars }} {
	if y, ok := x.x.(*{{ .TagStructName }}{{ .TyVars }}); ok {
		return &{{ .MaybeTagStructName }}{{ .TyVars }}{x: y}
	}
	return &{{ .MaybeTagStructName }}{{ .TyVars }}{}
}

type {{ .MaybeTagStructName }}{{ .TyVarsWithType }} struct {
	x *{{ .TagStructName }}{{ .TyVars }}
}

func (x *{{ .MaybeTagStructName }}{{ .TyVars }}) OK() bool {
	return x.x != nil
}

{{ if .HasFields }}
func (x *{{ .MaybeTagStructName }}{{ .TyVars }}) Fields() ({{ .Params }}, ok bool) {
	if !x.OK() {
		return
	}
	return {{ .FieldsMethodReturn }}, true
}
{{ end }}

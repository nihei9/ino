var {{ .TagNumToNameMapName }} = []string {
{{- range .TagNames }}
	"{{ . }}",
{{- end }}
}

type {{ .DataName }}{{ .TyVarsWithType }} interface {
	Eqer
	Maybe()  *{{ .MatcherStructName }}{{ .TyVars }}
	tag()    string
	tagNum() int
}

{{ range .ValConss }}
type {{ .TagStructNameWithTyParams }} struct {
{{- range (.Fields) }}
	{{ . }}
{{- end }}
}

func {{ .ConsFuncInstantiated }}({{ .Params }}) {{ $.DataName }}{{ $.TyVars }} {
	return &{{ .TagStructInstantiated }}{
	{{- range (.KeyValuePairs) }}
		{{ . }}
	{{- end }}
	}
}

func (x *{{ .TagStructInstantiated }}) Eq(y Eqer) bool {
{{- if .HasFields }}
	if z, ok := y.(*{{ .TagStructInstantiated }}); ok {
		return {{ .FieldsEqExpr }}
	}
	return false
{{- else }}
	_, ok := y.(*{{ .TagStructInstantiated }})
	return ok
{{- end }}
}

func (x *{{ .TagStructInstantiated }}) Maybe() *{{ $.MatcherStructName }}{{ $.TyVars }} {
	return &{{ $.MatcherStructName }}{{ $.TyVars }}{
		x: x,
	}
}

func (x *{{ .TagStructInstantiated }}) tag() string {
	return "{{ .TagName }}"
}

func (x *{{ .TagStructInstantiated }}) tagNum() int {
	return {{ .TagNum }}
}
{{ end }}

type {{ .MatcherStructName }}{{ .TyVarsWithType }} struct {
	x {{ .DataName }}{{ .TyVars }}
}

{{ range .ValConss }}
func (x *{{ $.MatcherStructName }}{{ $.TyVars }}) {{ .TagName }}() *{{ .MaybeTagStructInstantiated }} {
	if y, ok := x.x.(*{{ .TagStructInstantiated }}); ok {
		return &{{ .MaybeTagStructInstantiated }}{
			x: y,
		}
	}
	return &{{ .MaybeTagStructInstantiated }}{}
}
{{ end }}

{{ range .ValConss }}
type {{ .MaybeTagStructNameWithTyParams }} struct {
	x *{{ .TagStructInstantiated }}
}

func (x *{{ .MaybeTagStructInstantiated }}) OK() bool {
	return x.x != nil
}

{{- if .HasFields }}
func (x *{{ .MaybeTagStructInstantiated }}) Fields() ({{ .Params }}, ok bool) {
	if !x.OK() {
		return
	}
	return {{ .FieldsMethodReturn }}, true
}
{{- end }}
{{ end }}

{{ range .ValConss}}
func {{ .ApplyToFuncName }}{{ .ApplyTyVars }}(x {{ $.DataName }}{{ $.DataTyVars }}, f func({{ .ApplyCallbackParams }}) U) (result U, ok bool) {
{{- if .HasFields }}
	{{ .FieldSeq }}, ok := x.Maybe().{{ .TagName }}().Fields()
	if !ok {
		return
	}
	return f({{ .FieldSeq }}), true
{{- else }}
	if !x.Maybe().{{ .TagName }}().OK() {
		return
	}
	return f(), true
{{- end }}
}
{{ end }}

type {{ .CaseStructName }}{{ .CaseTyVars }} struct {
	match     func({{ .DataName }}{{ .TyVars }}) (U, bool)
	tagNum    int
	isDefault bool
	err       error
}

type {{ .CaseSetStructName }}{{ .CaseTyVars }} struct {
	cases []*{{ .CaseStructName }}{{ .CaseTyNames }}
}

func {{ .NewCaseSetFuncName }}{{ .CaseTyVars }}(cases ...*{{ .CaseStructName }}{{ .CaseTyNames }}) (*{{ .CaseSetStructName }}{{ .CaseTyNames }}, error) {
	checked := [{{ .TagCount }}+1]bool{}
	var hasDefault bool
	var firstDefaultPos int
	for i, c := range cases {
		if c.err != nil {
			return nil, c.err
		}
		checked[c.tagNum] = true
		if c.isDefault && !hasDefault {
			hasDefault = true
			firstDefaultPos = i
		}
	}
	if hasDefault && len(cases) > 1 && firstDefaultPos != len(cases) - 1 {
		return nil, fmt.Errorf("case #%v and subsequent cases are unreachable: only one default case can be placed the end", firstDefaultPos+2)
	}
	missingTags := make([]string, 0, {{ .TagCount }})
	for tagNum, ok := range checked[1:] {
		if !ok {
			missingTags = append(missingTags, {{ .TagNumToNameMapName }}[tagNum])
		}
	}
	if len(missingTags) > 0 && !hasDefault {
		var b strings.Builder
		fmt.Fprintf(&b, missingTags[0])
		for _, t := range missingTags[1:] {
			fmt.Fprintf(&b, ", %v", t)
		}
		return nil, fmt.Errorf("non-exhaustive patterns: missing tags: %v", b.String())
	}
	return &{{ .CaseSetStructName }}{{ .CaseTyNames }}{
		cases: cases,
	}, nil
}

func (s *{{ .CaseSetStructName }}{{ .CaseTyNames }}) Match(x {{ .DataName }}{{ .TyVars}}) (U, error) {
	for _, c := range s.cases {
		if result, ok := c.match(x); ok {
			return result, nil
		}
	}
	var zero U
	return zero, fmt.Errorf("non-exhaustive patterns")
}

func {{ .DefaultCaseFuncName }}{{ .CaseTyVars }}(f func({{ .DataName }}{{ .TyVars }}) U) *{{ .CaseStructName }}{{ .CaseTyNames }} {
	return &{{ .CaseStructName }}{{ .CaseTyNames }}{
		match: func(x {{ .DataName }}{{ .TyVars }}) (U, bool) {
			return f(x), true
		},
		isDefault: true,
	}
}

{{ range .ValConss }}
func {{ .CaseFuncName }}{{ .ApplyTyVars }}(y {{ $.DataName }}{{ $.DataTyVars }}, f func({{ .ApplyCallbackParams }}) U) *{{ $.CaseStructName }}{{ .ApplyTyNames }} {
	var err error
	if ok := y.Maybe().{{ .TagName }}().OK(); !ok {
		err = fmt.Errorf("condition must be {{ .TagName }} but given %v", y.tag())
	}
	return &{{ $.CaseStructName }}{{ .ApplyTyNames }}{
		match: func(x {{ $.DataName }}{{ $.DataTyVars }}) (U, bool) {
			if x.Eq(y) {
				return ApplyTo{{ .TagName }}(x, f)
			}
			var zero U
			return zero, false
		},
		tagNum: y.tagNum(),
		err: err,
	}
}
{{ end }}
